# Online Python compiler (interpreter) to run Python online.
# Write Python 3 code in this online editor and run it.
# Get started with interactive Python!
# Supports Python Modules: builtins, math,pandas, scipy
# matplotlib.pyplot, numpy, operator, processing, pygal, random,
# re, string, time, turtle, urllib.request
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import scipy as sp

# def statprint(title: str, arr: np.ndarray):
#   print(f"{title}: {round(np.mean(arr), 5)}, {round(np.std(arr), 5)}, rel: {round(np.mean(arr) / np.std(arr), 3)}")

# # 7 iter, MAD
# grandmean = [5.632133239306025, 3.4818874080340834, 3.1685266243901045, 7.470424550806501, 5.790214423925903, 7.042573953380146, 5.526121035752036, 6.984420504851722, 6.508813797871576, 3.2042611651454678]
# mean_mne = [4.77300796756316, 5.673471153187676, 4.2427426385626905, 7.689691274111003, 5.539562726893984, 5.673499124071006, 5.45412914842102, 5.831069477567678, 4.465102464895366, 3.7239619744270143]

# # 7 iter, 2x MAD
# grandmean = [3.5527420044040783, 6.67121711628618, 4.0944631815947075, 5.6212514775910005, 5.6468948031368695, 5.606453239481745, 7.933327257540832, 2.2797453508680547, 3.519344993334177, 3.5441670233461124]
# mean_mne = [4.743542459294928, 6.3080451135555, 5.109961683574958, 5.289007108792149, 4.338980979718927, 4.596652542011806, 6.837897781834191, 4.095665869037204, 4.695036079383918, 5.010851659587296]

# # 7 iter, pos-based
# grandmean = [0.00849243396941609, 0.010091830359892666, 0.008777556240243812, 0.004772312698181556, 0.004804671678456318, 0.013081837878963614, 0.0027798182081857576, 0.008275620845912516, 0.007501302935698426, 0.00877843329459143]
# mean_mne = [0.009065642017313065, 0.006416666561997376, 0.007812022571271902, 0.008016932647734381, 0.010957296807502863, 0.0072169592151270796, 0.00904474090665124, 0.009241835982636197, 0.009800492353601977, 0.00772123261262096]
# # print(f"Grandmean: {round(np.mean(grandmean), 5)}, {round(np.std(grandmean), 5)}")
# # print(f"Mean MNE: {round(np.mean(mean_mne), 5)}, {round(np.std(mean_mne), 5)}")

# # 35 iter, pos-based
# grandmean = [0.005543165780719441, 0.00671773650017844, 0.009136504737707503, 0.00445346839055489, 0.008900041353550596, 0.006232334255998061, 0.010812838037870903, 0.008814272218894872, 0.006252424461812739, 0.004946525504720443]
# mean_mne = [0.007376613561990375, 0.008659798286658556, 0.009761516256694741, 0.007591005670628183, 0.00801588656829417, 0.008262079558219637, 0.010274828607671234, 0.009575341743678247, 0.008133190116268806, 0.007486586078176151]
# # print(f"Grandmean: {round(np.mean(grandmean), 5)}, {round(np.std(grandmean), 5)}")
# # print(f"Mean MNE: {round(np.mean(mean_mne), 5)}, {round(np.std(mean_mne), 5)}")

# # 35 iter, pos-based, outliers removed on kernel level (m=3)
# grandmean = [0.007819820372976233, 0.00746021378934447,0.0060189016444723645, 0.007393346019763355, 0.006410550759905434, 0.007096838924701289, 0.005065463740221575, 0.005227033157890469, 0.006758764615364102, 0.007662539936157557]
# # m=3 grandmean = [0.006321264017816654, 0.008495485410541046, 0.008518186466785791, 0.008449694182700529, 0.009243346056186971, 0.006215943700855735, 0.007601564000779851, 0.008035821758313886, 0.005933729631406541, 0.005828704106846291]
# # m=1 grandmean = [0.010685712244957062, 0.006300916201031178, 0.008007380193086956, 0.006253338720094056, 0.008599113965736602, 0.006490703689708151, 0.009095730209510247, 0.005714345440906514, 0.006364887750322694, 0.005797840852631318]
# mean_mne = [0.00853848001654333, 0.009755600158755835, 0.008174584208590059, 0.009568594363113603, 0.007432913114539574, 0.00831887750434932,0.006237146276466882, 0.008810541513464847, 0.007357347457388134, 0.007650346131436225]
# # print(f"Grandmean: {round(np.mean(grandmean), 5)}, {round(np.std(grandmean), 5)}")
# # print(f"Mean MNE: {round(np.mean(mean_mne), 5)}, {round(np.std(mean_mne), 5)}")

# # 35 iter, pos-based, median vs mean
# grandmean = [0.007074899196761694, 0.008359621469004437, 0.007282630633193846, 0.00720588882579895, 0.00916513670338687, 0.006689585865535588, 0.008472400724362377, 0.008090937112525705, 0.007519740205117382, 0.005231352029839304]
# mean_mne = [0.008437848025679146, 0.009586975586921639, 0.008769041403361053, 0.008799253276631279, 0.009857811924408265, 0.007403629050926621, 0.008362971168175984, 0.00841835823179989, 0.0093153990695122, 0.007579233653641397]
# # print(f"Grandmean: {round(np.mean(grandmean), 5)}, {round(np.std(grandmean), 5)}")
# # print(f"Mean MNE: {round(np.mean(mean_mne), 5)}, {round(np.std(mean_mne), 5)}")

# # 35 iter, pos-based, mean
# grandmean_GEMM = [0.007074899196761694, 0.008359621469004437, 0.007282630633193846, 0.00720588882579895, 0.00916513670338687, 0.006689585865535588, 0.008472400724362377, 0.008090937112525705, 0.007519740205117382, 0.005231352029839304]
# grandmean_convolution = [0.017615092635114765, 0.016950062877390634, 0.018034387446397532, 0.016054627452119493, 0.01562858637581745, 0.017435989087218728, 0.018743725384396382, 0.01706658002541483, 0.01680025972878117, 0.020267617316509712]
# grandmean_pnpoly = [0.011059389211275784, 0.011157762048303663, 0.010302723627801153, 0.012031938335121707, 0.012963825418269233, 0.011447425563009645, 0.012233517750038402, 0.011694918322462576, 0.01267368960424837, 0.010666023625091859]
# statprint("GEMM", grandmean_GEMM)
# statprint("Conv", grandmean_convolution)
# statprint("PnPoly", grandmean_pnpoly)

# # # 35 iter, pos-based, mean, last pos only
# # grandmean_GEMM = [0.004155660081572204, 0.004422809658244704, 0.004556384446580954, 0.005788240827904143, 0.005268783317707617, 0.004779009093808036, 0.004660275948620259, 0.0038736688617512344, 0.004304076513056926, 0.005624982753270949]
# # grandmean_convolution = [0.010319803240044044, 0.010917090887377781, 0.00819611382730186, 0.012841684417675386, 0.010187072651747656, 0.012410310005712131, 0.011182552063970555, 0.011049821475674172, 0.010485716475414528, 0.00929114118074705]
# # grandmean_pnpoly = [0.008141594699246186, 0.006736333148417393, 0.006847861842927613, 0.008030066004735966, 0.008476180782776852, 0.008096983221442098, 0.00651327575939695, 0.008320040610462542, 0.008810766866307518, 0.007160142187556235]
# # print(f"GEMM: {round(np.mean(grandmean_GEMM), 5)}, {round(np.std(grandmean_GEMM), 5)}")
# # print(f"Conv: {round(np.mean(grandmean_convolution), 5)}, {round(np.std(grandmean_convolution), 5)}")
# # print(f"PnPoly: {round(np.mean(grandmean_pnpoly), 5)}, {round(np.std(grandmean_pnpoly), 5)}")

# # # 35 iter, pos-based, mean, last pos only
# # grandmean_GEMM = [0.0005600992903287401, 0.0004709925850491679, 0.00035960920344970244,0.0004694013938834612, 0.0005553257168316202, 0.0005282754670146071, 0.0005298666581803139, 0.00040257136492378195,0.00039302421792954204,0.000420074467746555]
# # grandmean_convolution = [0.001716462208151959, 0.0020478828650573803,0.0017115156311832212,0.0012366442421844084,0.0013306292045904234,0.001385041551246537, 0.0013256826276216859,0.001657103284527107, 0.0016472101305896319, 0.001553225168183617]
# # grandmean_pnpoly = [0.0008792878853669128,0.0015378491822260819,0.00129541178173397, 0.0010783036618902883,0.0010385005065856128,0.0009552757273122016,0.0010348820379215515,0.001244753220437111, 0.0014148212476479951, 0.000998697351280938]
# # print(f"GEMM: {round(np.mean(grandmean_GEMM), 5)}, {round(np.std(grandmean_GEMM), 5)}")
# # print(f"Conv: {round(np.mean(grandmean_convolution), 5)}, {round(np.std(grandmean_convolution), 5)}")
# # print(f"PnPoly: {round(np.mean(grandmean_pnpoly), 5)}, {round(np.std(grandmean_pnpoly), 5)}")

# # 35 iter, pos-based, mean, non-sqrt count
# statprint("GEMM", [0.046553751160846285,0.04600072182217426, 0.03688269015457698, 0.045021687212319875,0.04870731991332348, 0.03755851243877531, 0.04737972402959037, 0.04614624348696525, 0.039791206788310815, 0.04987802073177435])
# statprint("Conv", [0.050347422125657806,0.04560782417626926, 0.04979074027999179, 0.060484015038203054,0.04167425496090009, 0.043688449832635624,0.033334568917382464,0.04201475178864352, 0.03961514510216894,  0.04906307771088346])
# statprint("PnPoly", [0.051355070124067086,0.046601144549472825,0.04064310394097628, 0.04493915405769508, 0.03858456639611655, 0.03921585000612356, 0.040827924186586796,0.044920041120649026,0.04070118500209686, 0.04501170899347191])
# print("")

# # 35 iter, pos-based, mean, non-sqrt count, combined
# statprint("Random", [0.05419696762930387, 0.05420240584401622, 0.04939664178653175, 0.044879949434830986, 0.05428851269502086, 0.05010080649346119, 0.04963013718709325, 0.050656186409111736, 0.051121793064878664, 0.04703986255908942])
# statprint("Random median", [0.0502541839637389, 0.03777482533501221, 0.041801185285714394, 0.046232105167871275,0.042478702003244474, 0.04457347188973446, 0.03998686017886358, 0.03657033916363634, 0.03839352359578432, 0.03768488629817435])
# statprint("Random MAD 3", [0.04503322339231425, 0.044074489278225326,0.046261270121609875,0.043595992793312194,0.044619530610364215,0.045132835213115806,0.04761718098848983, 0.046839568059343535,0.048847169878968644, 0.04900601829854804])
# statprint("Random median MAD 2", [0.03787398169847943, 0.032292178284950256, 0.04101718546897673, 0.0347699636262942, 0.031417656626003376, 0.0443206423578768, 0.04438867770918601, 0.03722748204372766, 0.04093752882236559, 0.0494204161104248])
# statprint("Random median MAD 2.5", [0.03803050813240902, 0.04773846469618751, 0.038371206592695634, 0.03278261672675838, 0.03770826470463951, 0.0393219830791359, 0.037355311115070226, 0.040335945186513095, 0.03780098264701018, 0.0473877494291877])
# statprint("Random median MAD 3", [0.033429909702080186, 0.04511756017799972, 0.039421624595749175, 0.03995746526127202, 0.03927249768536101, 0.04040773397955318, 0.041562405911380995, 0.039808068236315615, 0.03473425537968273, 0.03654027437074254])
# statprint("Random median MAD 3.5", [0.04582868686241209, 0.04358687356295791, 0.033258265207850524, 0.03486132342898431, 0.04822154639627474, 0.03590224602250903, 0.039132795689137294, 0.05025796673272875, 0.04476402673253004, 0.03188221926520249])
# statprint("Random median MAD 4", [0.05169770738425686, 0.041262766672955274, 0.03700491264904934, 0.04562039940801329, 0.029502957386354528, 0.03837557271628098, 0.03521758117734178, 0.046846807807604814, 0.03700270447823364, 0.04566086728912771])
# statprint("Random median MAD 5", [0.03774232308040308,0.04363931926262241,0.042881421228928886,0.041413322670093074,0.04326831563697326,0.03345130622897786,0.04028141010187364,0.050022290301353266,0.04042483422936125,0.043554334535167])
# print("")
# statprint("BO", [0.011865961948647802, 0.022393076287413074, 0.012624632053229548, 0.019262367989437448, 0.018542519229000656, 0.015887783664596648, 0.03385975335144707, 0.010856758247110694, 0.013205552814159268, 0.009451967026273274])
# statprint("BO median", [0.0070939740807791545, 0.006506496277936555, 0.006075836747870271, 0.006186467282632863, 0.00455216298673176, 0.003921965601359435, 0.00530646379676726, 0.006683181458600046, 0.005270158744328076, 0.005849850660233485])
# statprint("BO MAD 3", [0.008068678450420903, 0.005593291586087752, 0.007117224540585563, 0.005318499817476323, 0.003792764378846165, 0.004151301150412549, 0.005447338893646472, 0.004691744573570813, 0.004712064850778888, 0.006333624401409786])
# statprint("BO median MAD 2", [0.004197885018208295, 0.005295897748652095, 0.003943954957131548, 0.0042369098332658665, 0.0031299843168694197, 0.0037171302340524384, 0.003632469707052263, 0.004110585816396145, 0.004699952947088326, 0.003464031940223695])
# statprint("BO median MAD 3", [0.0030259599690751794, 0.004167793258287118, 0.0037554147064767143, 0.0048059020363299555, 0.0038266681195946854, 0.00346792705304136, 0.003889728160482569, 0.004899881231823331, 0.0043300347506884974, 0.004754885699159504])
# statprint("BO median MAD 4", [0.004007859604218962, 0.004071227430216551, 0.006030421997578829, 0.004215994772236525, 0.005269086076434292, 0.005837969197254944, 0.0036956596216783312,0.005849068276123223, 0.004392177253306965, 0.0036775303317857938])


# Compare the standard deviation between three runs with different number of iterations
def stat(arr):
    arr = np.array(arr)
    return f"mean {round(np.mean(arr), 8)}, std {round(np.std(arr), 8)}, var {round(np.var(arr), 8)}"


# iter14 = [
#     0.003743057338720112, 0.002835904216761917, 0.0028167497358735517, 0.002748700275489425, 0.002973658374966095, 0.002777765552313739, 0.0032589741576518724,
#     0.002736097702905716, 0.0039238869217348765, 0.0047611874524052114
# ]
# iter35 = [
#     0.0031126844789934427, 0.003220235521482243, 0.002892096788183836, 0.0028530926780033546, 0.0028433472749076157, 0.0028614650726555536,
#     0.002671951339794247, 0.002803755008020281, 0.0028363253909014265, 0.0029046055636104615
# ]
# iter56 = [
#     0.002974342308011004, 0.0028733310538670387, 0.0030248725071455374, 0.003297355400237884, 0.0027809550972092635, 0.002906060849713539, 0.003071904971190744,
#     0.0026832516620964087, 0.0028958892740531626, 0.0029397374814389404
# ]
# iter98 = [
#     0.002859528976479552, 0.0029491814140477778, 0.0030806437585455724, 0.003052253466445482, 0.0027216303335055596, 0.0026672456465385145,
#     0.0028497212223449453, 0.002799560132972277, 0.0027264133652604165, 0.002688013481642166
# ]
# print(stat(iter14))
# print(stat(iter35))
# print(stat(iter56))
# print(stat(iter98))

# 5 dummy params
iter8 = [0.002758825891626859, 0.004566855545666786, 0.0016973939028309118, 0.0010342045490310042, 0.004572424640439713]
iter35 = [0.0026032630220948205, 0.0018443945032294874, 0.0030982615644043077, 0.003633579610314166, 0.004415830216601638]
iter56 = [0.0017923771892668309, 0.003180477799284648, 0.0024928820087142364, 0.0022134007546690112, 0.0030127941664379937]
iter77 = [0.002299132104495915, 0.0032424527008512415, 0.0036735430836338256, 0.004634536634433139, 0.0027480895893587302]
iter96 = [0.002586975658244487, 0.0034783343939803124, 0.003296835980850937, 0.0026681539221394303, 0.0034789841961584676]
iter112 = [0.0030513962820521478, 0.002900095885334111, 0.002768046254516593, 0.002752219392924347, 0.0025688894013483495]
# iter168 = [0.0025876994839087036, 0.0019682866510066527, 0.002720636381723557, 0.003293531618057878, 0.0032017106584635536] time 414.698

xaxis = np.array([8, 35, 56, 77, 96, 112])
mean = np.array([0.00292594, 0.00311907, 0.00253839, 0.00331955, 0.00310186, 0.00280813])
std = np.array([0.00145048, 0.00087608, 0.00051021, 0.00080353, 0.00039375, 0.000161])
time = np.array([23.755, 96.504, 141.86, 202.038, 233.884, 277.053])

# # 8 dummy params
# iter8 = [0.002758825891626859, 0.004566855545666786, 0.0016973939028309118, 0.0010342045490310042, 0.004572424640439713]
# iter35 = [0.0026032630220948205, 0.0018443945032294874, 0.0030982615644043077, 0.003633579610314166, 0.004415830216601638]
# iter56 = [0.0017923771892668309, 0.003180477799284648, 0.0024928820087142364, 0.0022134007546690112, 0.0030127941664379937]
# iter77 = [0.002299132104495915, 0.0032424527008512415, 0.0036735430836338256, 0.004634536634433139, 0.0027480895893587302]
# iter96 = [
#     0.0022632101674542847, 0.0027298212544457907, 0.001793173851148216, 0.0018397264244719904, 0.002445864169757725, 0.0013482699272646219,
#     0.001958538383678629, 0.0016195222720256515
# ]
# iter112 = [
#     0.0029951868983996463, 0.0028053496055335534, 0.0017745570178490568, 0.001070434155576466, 0.0015523409775493097, 0.0014862744995762925,
#     0.000887816120365435, 0.000994771501840447
# ]
# iter168 = [
#     0.003524259700100555, 0.003590431101202459, 0.0022053777903561114, 0.0033223532916022295, 0.003143715946075092, 0.002896063753217879, 0.0030876312982783373,
#     0.0029036213198686328
# ] time 418.463

# random_sample 8 dummy params
iter8 = [
    0.04740403794588476, 0.04191932924706207, 0.05806693685182757, 0.038099210757797854, 0.04729835940184036, 0.04701482365702476, 0.03530287500478393,
    0.045722114553629414
]
iter35 = [
    0.04259019191214794, 0.03457832816588836, 0.03758025804805211, 0.03994190262014129, 0.03990861703106653, 0.039004989036325564, 0.032127079316372084,
    0.042971785145627515
]
iter56 = [
    0.04462047856467981, 0.03986858737668126, 0.04336477381795109, 0.0352557230954192, 0.03535097949178117, 0.03338324158464476, 0.035984352466232786,
    0.042121927105087456
]
iter77 = [
    0.03726773803667467, 0.041507644833457015, 0.045789325250194295, 0.03894382239210236, 0.042201686635772714, 0.03331351539204627, 0.03800769286153116,
    0.040966705215664846
]
iter96 = [
    0.03645881697419517, 0.03533318366644479, 0.036238191434311715, 0.03904923129110901, 0.039323703080192625, 0.0376137756138496, 0.04613138165158776,
    0.041428481765073626
]
iter112 = [
    0.04059180118711565, 0.037624573000593235, 0.03851120850926323, 0.03755526748220386, 0.03647654132389643, 0.04257954890171615, 0.041970498930830845,
    0.03789210599818743
]
# iter168 = [
#     0.040797521993137506, 0.04027119824122884, 0.04000099205054886, 0.03519192391979075, 0.04006622879312976, 0.03710459830424679, 0.03355552573733148,
#     0.03763000622064944
# ] time 17.595

xaxis = np.array([8, 35, 56, 77, 96, 112])
mean = np.array([0.04510346, 0.03858789, 0.03874376, 0.03974977, 0.0389471, 0.03915019])
std = np.array([0.00649469, 0.00349683, 0.00400927, 0.00350588, 0.00328427, 0.00211553])
time = np.array([2.435, 5.467, 6.99, 9.446, 9.788, 12.044])

print(stat(iter8))
print(stat(iter35))
print(stat(iter56))
print(stat(iter77))
print(stat(iter96))
print(stat(iter112))
# print(stat(iter168))

inverse_variance_weighted_average = np.sum(mean / std**2) / np.sum(1 / std**2)
inverse_std_weighted_average = np.sum(mean / std) / np.sum(1 / std)
grandmean = np.full((len(xaxis)), inverse_variance_weighted_average)
print(f"Mean: {np.mean(mean)}, variance weighted: {inverse_variance_weighted_average}, std weighted: {inverse_std_weighted_average}")

# plot
fig, ax1 = plt.subplots()
plt.grid(visible=True, axis='y')
color = 'tab:red'
ax1.set_xlabel('Number of iterations')
ax1.set_ylabel('Score', color=color)
ax1.errorbar(xaxis, mean, yerr=std, color=color, marker='o', linestyle='dashed', label='mean')
ax1.plot(xaxis, grandmean, color='k', linestyle='dashed', label='grandmean')
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()    # instantiate a second axes that shares the same x-axis
color = 'tab:blue'
ax2.set_ylabel('Time in seconds', color=color)    # we already handled the x-label with ax1
ax2.plot(xaxis, time, color=color, marker='o', linestyle='dashed', label='time ')
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()
plt.show()
